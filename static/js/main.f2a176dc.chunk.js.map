{"version":3,"sources":["utils.tsx","Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadScript","_ref","src","_ref$location","location","document","querySelector","concat","script","createElement","head","body","appendChild","Map","latitude","longitude","_useState","useState","_useState2","_slicedToArray","kakaoMap","setKakaoMap","_useState3","_useState4","setMarkers","container","useRef","useEffect","process","onload","kakao","maps","load","options","center","LatLng","level","map","current","getCenter","handleViewport","_ref2","window","innerWidth","innerHeight","width","height","style","addEventListener","relayout","setCenter","removeEventListener","_markers","pos","Marker","position","React","id","ref","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"6LAOaA,EAAa,SAAHC,GAGsB,IAF3CC,EAAGD,EAAHC,IAAGC,EAAAF,EACHG,gBAAQ,IAAAD,EAAG,OAAMA,EAEjB,GAAIE,SAASC,cAAa,eAAAC,OAAgBL,EAAG,OAC3C,OAAO,KAET,IAAMM,EAASH,SAASI,cAAc,UAItC,OAHAD,EAAON,IAAMA,GACkB,SAAbE,EAAsBC,SAASK,KAAOL,SAASM,MACvDC,YAAYJ,GACfA,GCPM,SAASK,EAAGZ,GAAoC,IAAjCa,EAAQb,EAARa,SAAUC,EAASd,EAATc,UAASC,EACfC,mBAAgC,MAAKC,EAAAC,YAAAH,EAAA,GAA9DI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAKxBI,EAE0BL,mBAAmC,IAAGM,EAAAJ,YAAAG,EAAA,GAApDE,GAAFD,EAAA,GAAYA,EAAA,IAEpBE,EAAyCC,mBAuE/C,OArEAC,oBAAU,WACR,IAAMnB,EAAmCR,EAAW,CAClDE,IAAG,gDAAAK,OAAkDqB,mCAAuC,gDAC5FxB,SAAU,SAERI,IACFA,EAAOqB,OAAS,WACdC,MAAMC,KAAKC,KAAK,WACd,IACMC,EAAU,CACdC,OAFa,IAAIJ,MAAMC,KAAKI,OAAOrB,EAAUC,GAG7CqB,MAAO,GAEHC,EAAM,IAAIP,MAAMC,KAAKlB,IAAIY,EAAUa,QAASL,GAClDZ,EAAYgB,QAIjB,CAACZ,IAEJE,oBAAU,WACR,GAAiB,OAAbP,EAAJ,CAKA,IAAMc,EAASd,EAASmB,YAGlBC,EAAiB,WAAM,IAAAC,EACH,CAACC,OAAOC,WAAYD,OAAOE,aAA5CC,EAAKJ,EAAA,GAAEK,EAAML,EAAA,GACpBhB,EAAUa,QAAQS,MAAMF,MAAK,GAAAtC,OAAMsC,EAAK,MACxCpB,EAAUa,QAAQS,MAAMD,OAAM,GAAAvC,OAAMuC,EAAM,OAW5C,OARAN,IACAE,OAAOM,iBAAiB,SAAUR,GAGlCpB,EAAS6B,WAET7B,EAAS8B,UAAUhB,GAEZ,WACLQ,OAAOS,oBAAoB,SAAUX,MAEtC,CAACpB,IAEJO,oBAAU,WACR,GAAiB,OAAbP,EAAJ,CAIA,IAMMgC,EANY,CAChB,CAAC,SAAU,YACX,CAAC,SAAU,YACX,CAAC,WAAY,YACb,CAAC,UAAW,aAEuCf,IACnD,SAACgB,GAAG,OACF,IAAIvB,MAAMC,KAAKuB,OAAO,CACpBjB,IAAKjB,EACLmC,SAAU,IAAIzB,MAAMC,KAAKI,OAAOkB,EAAI,GAAIA,EAAI,QAGlD7B,EAAW4B,KACV,CAAChC,EAAUI,IAEPgC,IAAA/C,cAAA,OAAKgD,GAAG,YAAYC,IAAKjC,UChFnBkC,MARf,WACE,OACEH,IAAA/C,cAAA,OAAKmD,UAAU,OACbJ,IAAA/C,cAACI,EAAG,CAACC,SAAU,SAAUC,UAAW,eCO3B8C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAjE,GAAiD,IAA9CmE,EAAMnE,EAANmE,OAAQC,EAAMpE,EAANoE,OAAQC,EAAMrE,EAANqE,OAAQC,EAAMtE,EAANsE,OAAQC,EAAOvE,EAAPuE,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCHDW,IAASC,WACpBrE,SAASsE,eAAe,SAErBC,OACHpB,IAAA/C,cAAC+C,IAAMqB,WAAU,KACfrB,IAAA/C,cAACkD,EAAG,QAORE","file":"static/js/main.f2a176dc.chunk.js","sourcesContent":["import React, { useEffect } from \"react\"\n\ntype ScriptProps = {\n  src: string\n  location?: \"head\" | \"body\"\n}\n\nexport const loadScript = ({\n  src,\n  location = \"head\",\n}: ScriptProps): HTMLScriptElement | null => {\n  if (document.querySelector(`script[src=\"${src}\"]`)) {\n    return null\n  }\n  const script = document.createElement(\"script\")\n  script.src = src\n  const container = location === \"head\" ? document.head : document.body\n  container.appendChild(script)\n  return script\n}\n","/* global kakao */\n\nimport React, { useEffect, useState, useRef } from \"react\"\n\nimport { loadScript } from \"./utils\"\n\ntype MapProps = {\n  latitude: number\n  longitude: number\n}\n\nexport default function Map({ latitude, longitude }: MapProps) {\n  const [kakaoMap, setKakaoMap] = useState<kakao.maps.Map | null>(null)\n\n  const newMarker = (lat: number, lng: number): kakao.maps.Marker =>\n    new kakao.maps.Marker({\n      position: new kakao.maps.LatLng(lat, lng),\n    })\n\n  const [markers, setMarkers] = useState<Array<kakao.maps.Marker>>([])\n\n  const container: React.MutableRefObject<any> = useRef()\n\n  useEffect(() => {\n    const script: HTMLScriptElement | null = loadScript({\n      src: `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY}&libraries=services,clusterer&autoload=false`,\n      location: \"head\",\n    })\n    if (script) {\n      script.onload = () => {\n        kakao.maps.load(() => {\n          const center = new kakao.maps.LatLng(latitude, longitude)\n          const options = {\n            center,\n            level: 3,\n          }\n          const map = new kakao.maps.Map(container.current, options)\n          setKakaoMap(map)\n        })\n      }\n    }\n  }, [container])\n\n  useEffect(() => {\n    if (kakaoMap === null) {\n      return\n    }\n\n    // save center position\n    const center = kakaoMap.getCenter()\n\n    // change viewport size\n    const handleViewport = () => {\n      const [width, height] = [window.innerWidth, window.innerHeight]\n      container.current.style.width = `${width}px`\n      container.current.style.height = `${height}px`\n    }\n\n    handleViewport()\n    window.addEventListener(\"resize\", handleViewport)\n\n    // relayout and...\n    kakaoMap.relayout()\n    // restore\n    kakaoMap.setCenter(center)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleViewport)\n    }\n  }, [kakaoMap])\n\n  useEffect(() => {\n    if (kakaoMap === null) {\n      return\n    }\n\n    const positions = [\n      [37.52897, 126.917101],\n      [37.52897, 126.917101],\n      [37.5268796, 126.919094],\n      [37.527502, 126.920146],\n    ]\n    const _markers: Array<kakao.maps.Marker> = positions.map(\n      (pos) =>\n        new kakao.maps.Marker({\n          map: kakaoMap,\n          position: new kakao.maps.LatLng(pos[0], pos[1]),\n        })\n    )\n    setMarkers(_markers)\n  }, [kakaoMap, setMarkers])\n\n  return <div id=\"container\" ref={container} />\n}\n","import React from \"react\"\nimport Map from \"./Map\"\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map latitude={37.52897} longitude={126.917101} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}